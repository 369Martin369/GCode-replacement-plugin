To achieve this, you'll need to write a Python script that reads through the G-code, modifies the feedrate (`F`) values as specified, and writes the changes back to a new file. Here's a script that accomplishes this:

```python
import os
import re

def process_gcode(input_file_path, output_file_path):
    with open(input_file_path, 'r') as file:
        lines = file.readlines()

    new_lines = []
    for line in lines:
        # Find feedrate values using regex
        match = re.search(r'F(\d+)', line)
        if match:
            feedrate = int(match.group(1))
            if feedrate < 1000:
                line = re.sub(r'F\d+', 'F2000', line)
            elif feedrate > 5000:
                line = re.sub(r'F\d+', 'F5000', line)
        new_lines.append(line)

    with open(output_file_path, 'w') as file:
        file.writelines(new_lines)

if __name__ == "__main__":
    input_file = 'input.gcode'
    output_file = 'output.gcode'
    
    # Ensure the input file exists
    if not os.path.isfile(input_file):
        print(f"Error: The file {input_file} does not exist.")
    else:
        process_gcode(input_file, output_file)
        print(f"Processed G-code saved to {output_file}")
```

### Explanation:

1. **Reading the G-code File:**
   The script opens the input G-code file and reads all the lines.

2. **Processing Each Line:**
   It uses a regular expression to search for feedrate (`F`) values in each line.
   - If a feedrate value (`F`) is found and it's less than 1000, it replaces it with `F2000`.
   - If the feedrate value is greater than 5000, it replaces it with `F5000`.

3. **Writing the Modified G-code:**
   It writes the modified lines to a new G-code file.

### Running the Script:

1. Save the script as `process_gcode.py` or any name you prefer.
2. Ensure you have an input G-code file named `input.gcode` in the same directory as the script (or modify the script to specify the correct paths).
3. Run the script using Python:

   ```bash
   python process_gcode.py
   ```

4. The script will create a new file named `output.gcode` with the modified feedrate values.

### Integration with Cura:

To integrate this script with Cura as a post-processing script, follow the steps outlined earlier:

1. **Save the Script in Cura's Post-Processing Script Directory:**
   Save your script in the directory appropriate for your operating system (e.g., `C:\Program Files\Ultimaker Cura <version>\plugins\PostProcessingPlugin\scripts` on Windows).

2. **Add the Script in Cura:**
   - Open Cura and load a model.
   - Go to `Extensions > Post Processing > Modify G-Code`.
   - Click on `Add a script`.
   - Select your script from the list.

By following these steps, your script will automatically be applied to the G-code generated by Cura, modifying the feedrate values as specified.